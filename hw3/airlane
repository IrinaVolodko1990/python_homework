#Создать класс Airline: Пункт назначения, Номер рейса,
# Тип самолета, Время вылета, Дни недели.
# Функции- члены реализуют запись и считывание полей
# (проверка корректности).
#Создать список объектов. Вывести:
#a)список рейсов для заданного пункта назначения;
#список рейсов для заданного дня недели;.
class Airline:
    def __init__(self, toCity="Moscow", number="0010",
                 airType="Boing 747-111", dayOfFly=["понедельник","среда","пятница"],
                 timeOfFly="08.30"):
        self.__toCity=toCity
        self.__number=number
        self.__airType=airType
        self.__dayOfFly=dayOfFly
        self.__timeOfFly=timeOfFly
        print("Вызван конструктор объекта")

    def get_city(self):
        return self.__toCity
    def get_number(self):
        return self.__number
    def get_airType(self):
        return self.__airType
    def get_timeOfFly(self):
        return self.__timeOfFly
    def get_dayOfFly(self):
        return self.__dayOfFly

    def set_city(self, city):
        return self.__toCity
    def set_number(self, number):
        return self.__number
    def set_airType(self, airType):
        return self.__airType
    def set_timeOfFly(self, timeOfFly):
        return self.__timeOfFly
    def set_dayOfFly (self, dayOfFly):
        return self.__dayOfFly

    def __del__(self):
        print('Вызван деструктор класс')

    def __str__(self):
        return ("Пункт назначения: " + str(self.__toCity)
                + ", номер рейса: "+str(self.__number)+ ", тип самолёта: "
                + str(self.__airType) +   ", дни вылета: "
                + str(self.__dayOfFly)+ ", время вылета: "  +  str(self.__timeOfFly))

  #  def __setattr__(self, key, value):
   #     if key=="__toCity":
        #    self.__dict__[key] = value.upper()


fly_list= [Airline(),
           Airline("Moscow", "0222", "Boing 747-111", ["четверг","суббота", "воскресенье"], "11.30"),
           Airline("Moscow", "0333", "Boing 747-111", ["среда","суббота", "четверг"], "14.30"),
           Airline("Moscow", "0444", "Boing 747-111", ["вторник", "суббота", "воскресенье"], "18.30"),
           Airline("Moscow", "0555", "Boing 747-111", ["понедельник","суббота","вторник", "воскресенье"], "21.30"),
           Airline("Kiev", "0666", "Boing 747-111", ["среда", "суббота", "четверг","вторник"], "09.00"),
           Airline("Kiev", "0777", "Boing 747-111", ["пятница", "суббота", "воскресенье"], "12.00"),
           Airline("Kiev", "0888", "Boing 747-111", ["вторник", "пятница", "воскресенье"], "18.00"),
           Airline("Kiev", "0999", "Boing 747-111", ["понедельник", "суббота", "вторник", "воскресенье"], "23.30"),
           ]
new_list=[]
def city_seach(place):
    for i in range(len(fly_list)):
        if place== fly_list[i].get_city():
            new_list.append(fly_list[i])
            print(fly_list[i])
    if len(new_list)<=0:
        print ("В заданном направлении нет полётов")
new_list2=[]
def days_seach(day):
    for i in range(len(new_list)): #либо можем искать во всем списке полётов тогда меняем на fly_list
        for j in range (len(new_list[i].get_dayOfFly())):
            if day == new_list[i].get_dayOfFly()[j]:
                new_list2.append(new_list[i])
                print(new_list[i])
    if len(new_list2)<=0:
        print ("В указанный день полётов нет")

place=str(input("Введите город назначения:\n"))
city_seach(place)
day=str(input("Введите желаемый день вылета:\n"))
days_seach(day)
del(fly_list[3])
print("Реализация метода __setattr__")
setattr(fly_list[1], 'name', 'Belavia')
print (fly_list[1].name +":\n"+ str(fly_list[1]))
